function [times,errors,iters]=bench_qap(ns)
% Benchmark the QAP with random digraph data.
%function [times,errors,iters]=bench_qap(ns)
% Input is ns, if ns is a vector, it is interpreted as
% a vector of digraph sizes.  Each digraph is ER with p=log(n)/n.
% The isomorphoric "challenge" digraph is generated by randomly permuted the generated
% random digraph.  Then sfw a Frank-Wolf algorithm )FW) for QAP is invoked
% allowing up to 30 interations to align the random graph to its permuted
% version.
% On return the run time is given in the vector times,
% the number of edges in the permuted digraph that disagree between the FW
% solution in the vector errors and finally the number of iterations of FW
% performed is given in iters.
% Alternatively,
%   if ns is a square matrix than two sets of experiments are done in the
% first set 10 random permuations of A are applied and up to 30 iteration
% of FW are used to try to find this permutation.
% In the second set of experiments the matrix A is quantized to be 0/1
% using spones(A). The random
% permuation is kept to be the same for the corresponding experiment 1
% trial.
% On return the three arguments times, errors, and iters will be as before
% except they will have two columns each one for the first experiment and
% one for the experiment with the entries of A set to 0 and 1.
% John M. Conroy
% conroy@super.org
% September 9, 2011
% IDA Center for Computing Sciences
%  (c) 1996-2010, Institute for Defense Analyses, 4850 Mark Center Drive, Alexandria, Virginia, 22311-1882; 703-845-2500.
%
%     This material may be reproduced by or for the U.S. Government pursuant to the copyright license under the clauses at DFARS 252.227-7013 and 252.227-7014.
%

s = RandStream('mt19937ar','Seed',0);
[m,n]=size(ns);
if (n>1)&&(m==n)
    k=10;
    times=zeros(k,2);
    errors=times; iters=errors;
    for i=1:k
        q=randperm(s,n);
        for j=1:2
            if j==1,
                A=ns;
            else
                A=spones(ns);
            end
            B=A;
            B(q,q)=A;
            tic;
            [~,myq,~,iters(i,j)]=sfw(A,-B,30);
            times(i,j)=toc;
            errors(i,j)=sum(myq~=q);
        end
    end
else
    times=zeros(size(ns));
    errors=times;
    iters=errors;
    for i=1:length(ns)
        % Generate a random digraph is Pr(i,j)=log(n)/n;
        p=log(ns(i))/ns(i);
        A=spones(sprand(ns(i),ns(i),p));
        q=randperm(s,ns(i));
        B=A;
        B(q,q)=B;
        start=tic;
        [~,myq,~,iters(i)]=sfw(A,-B,30);
        times(i)=toc(start);        
        errors(i)=sum(myq~=q);
    end
end
